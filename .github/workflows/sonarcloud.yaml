name: Sonar
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

# Ensure that only one instance of the workflow is run at a time for each branch/tag.
# Jobs currently running on the branch/tag will be cancelled when new commits are pushed.
# See https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#concurrency.
concurrency:
  # `github.workflow` is the workflow name, `github.ref` is the current branch/tag identifier
  group: ${{ format('{0}:{1}', github.workflow, github.ref) }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Install gcovr
        run: pip install gcovr==6.0

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v2

      - name: Run build-wrapper
        run: |
          cmake -E make_directory build
          cmake -S . -B build -DCMAKE_CXX_FLAGS="--coverage" -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Debug -DCI_BUILD=ON
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Debug

      - name: Run tests to generate coverage statistics
        timeout-minutes: 10
        run: |
          build/tests/test_nuclear
          for f in build/tests/individual/*; do echo "Testing $f"; ./$f; done

      - name: Collect coverage into one XML report
        run: gcovr --exclude-unreachable-branches --sonarqube > coverage.xml

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" \
            --define sonar.coverageReportPaths=coverage.xml
