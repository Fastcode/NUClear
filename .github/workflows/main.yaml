# Continuous Integration tests
name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Ensure that only one instance of the workflow is run at a time for each branch/tag.
# Jobs currently running on the branch/tag will be cancelled when new commits are pushed.
# See https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#concurrency.
concurrency:
  # `github.workflow` is the workflow name, `github.ref` is the current branch/tag identifier
  group: ${{ format('{0}:{1}', github.workflow, github.ref) }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-linux:
    name: Linux GCC

    strategy:
      matrix:
        container:
          ["gcc:5", "gcc:7", "gcc:9", "gcc:10", "gcc:11", "gcc:12", "gcc:13"]

    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    continue-on-error: true

    # Use the container for this specific version of gcc
    container: ${{ matrix.container }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Download and install cmake
      - name: Install CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 3.27.1
          ninjaVersion: 1.11.1

      # Download and setup ccache
      - run: apt update # Docker container needs to update first
      - name: Setup CCache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-${{ matrix.container }}
      - name: Zero CCache Stats
        run: ccache --zero-stats

      - name: Configure CMake
        run: |
          cmake -E make_directory build
          cmake -S . -B build \
            -DBUILD_TESTS=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCI_BUILD=ON \
            -DCLANG_TIDY=OFF \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build
        timeout-minutes: 30
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build build --config Release --parallel 2

      - name: CCache Stats
        run: ccache --show-stats

      - name: Test
        timeout-minutes: 10
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          build/tests/test_nuclear
          for f in build/tests/individual/*; do echo "Testing $f"; ./$f; done

  build-osx:
    name: MacOS Clang
    runs-on: macos-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Download and setup ccache
      - name: Setup CCache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-${{ matrix.container }}
      - name: Zero CCache Stats
        run: ccache --zero-stats

      - name: Configure CMake
        run: |
          cmake -E make_directory build
          cmake -S . -B build \
            -DBUILD_TESTS=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCI_BUILD=ON \
            -DCLANG_TIDY=OFF \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build
        timeout-minutes: 30
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build build --config Release --parallel 2

      - name: CCache Stats
        run: ccache --show-stats

      - name: Test
        timeout-minutes: 10
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          build/tests/test_nuclear
          for f in build/tests/individual/*; do echo "Testing $f"; ./$f; done

  build-windows:
    name: Windows MSVC

    # The type of runner that the job will run on
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Download and setup ccache
      - name: Setup CCache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-clang-tidy
          variant: sccache

      - name: Configure CMake
        run: |
          cmake -E make_directory build
          cmake -S . -B build -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release -DCI_BUILD=ON -DENABLE_CLANG_TIDY=ON -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

      - name: Build
        timeout-minutes: 30
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build build --config Release --parallel 2

      - name: SCCache Stats
        run: sccache --show-stats

      - name: Test
        timeout-minutes: 10
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          build/tests/Release/test_nuclear.exe
          for f in build/tests/individual/Release/*; do echo "Testing $f"; ./$f; done
        shell: bash

  check-clang-tidy-linux:
    name: Clang-Tidy Linux
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install clang-tidy-15
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-15 main" | sudo tee /etc/apt/sources.list.d/llvm-15
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-15 main" | sudo tee -a /etc/apt/sources.list.d/llvm-15
          sudo apt-get update
          sudo apt-get install -y clang-tidy-15

      # Download and install cmake
      - name: Install CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 3.27.1
          ninjaVersion: 1.11.1

      # Download and setup ccache
      - name: Setup CCache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-clang-tidy
      - name: Zero CCache Stats
        run: ccache --zero-stats

      - name: Configure CMake
        run: |
          cmake -E make_directory build
          cmake -S . -B build \
            -DBUILD_TESTS=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCI_BUILD=ON \
            -DENABLE_CLANG_TIDY=ON \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build
        timeout-minutes: 30
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build build --config Release --parallel 2

      - name: CCache Stats
        run: ccache --show-stats

  check-clang-tidy-msvc:
    name: Clang-Tidy MSVC
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Download and setup ccache
      - name: Setup CCache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-clang-tidy
          variant: sccache

      - name: Configure CMake
        run: |
          cmake -E make_directory build
          cmake -S . -B build -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release -DCI_BUILD=ON -DENABLE_CLANG_TIDY=ON -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

      - name: Build
        timeout-minutes: 30
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build build --config Release --parallel 2

      - name: SCCache Stats
        run: sccache --show-stats
