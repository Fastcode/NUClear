# Continuous Integration tests
name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
  pull_request:
    branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Build the docker image
  build-linux:
    name: "Build and test the code for different gcc versions on linux"

    strategy:
      matrix:
        container: ["gcc:4.9", "gcc:5"]

    env:
      # Output the full test results when a test fails
      CTEST_OUTPUT_ON_FAILURE: 1

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Use the container for this specific version of gcc
    container: ${{ matrix.container }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v2

      # Download and install cmake
      - name: Install CMake
        run: |
          wget https://github.com/Kitware/CMake/releases/download/v3.19.1/cmake-3.19.1-Linux-x86_64.sh -q -O /tmp/cmake-install.sh
          chmod u+x /tmp/cmake-install.sh
          mkdir /usr/bin/cmake
          /tmp/cmake-install.sh --skip-license --prefix=/usr
          rm /tmp/cmake-install.sh

      - name: Configure CMake
        run: |
          cmake -E make_directory build
          cmake -S . -B build -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release

      - name: Build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build build --config Release --parallel 2

      - name: Test
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          cd build
          ctest -C Release
